import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild, } from "@angular/core";
import { Subject } from "rxjs";
import { PayPalScriptService } from "../services/paypal-script.service";
import * as i0 from "@angular/core";
import * as i1 from "../services/paypal-script.service";
export class NgxPaypalComponent {
    constructor(paypalScriptService, cdr, ngZone) {
        this.paypalScriptService = paypalScriptService;
        this.cdr = cdr;
        this.ngZone = ngZone;
        /**
         * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page
         * sharing base configuration. In such a case only a single component may register script.
         */
        this.registerScript = true;
        /**
         * Emitted when paypal script is loaded
         */
        this.scriptLoaded = new EventEmitter();
        this.ngUnsubscribe = new Subject();
        /**
         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)
         */
        this.initializePayPal = true;
    }
    set payPalButtonContainer(content) {
        this.payPalButtonContainerElem = content;
    }
    ngOnChanges(changes) {
        if (!this.payPalButtonContainerId) {
            this.payPalButtonContainerId = this.generateElementId();
        }
        // first time config setup
        const config = this.config;
        if (changes.config.isFirstChange()) {
            if (config && this.registerScript) {
                this.initPayPalScript(config, (payPal) => {
                    // store reference to paypal global script
                    this.payPal = payPal;
                    this.doPayPalCheck();
                });
            }
        }
        // changes to config
        if (!changes.config.isFirstChange()) {
            this.reinitialize(config);
        }
    }
    ngOnDestroy() {
        this.paypalScriptService.destroyPayPalScript();
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    }
    ngAfterViewInit() {
        this.doPayPalCheck();
    }
    customInit(payPal) {
        this.payPal = payPal;
        this.doPayPalCheck();
    }
    reinitialize(config) {
        this.config = config;
        this.payPal = undefined;
        this.paypalScriptService.destroyPayPalScript();
        this.payPalButtonContainerId = this.generateElementId();
        this.initializePayPal = true;
        if (this.payPalButtonContainerElem) {
            try {
                while (this.payPalButtonContainerElem.nativeElement.firstChild) {
                    this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);
                }
            }
            catch (error) {
                console.error(error);
            }
        }
        this.cdr.detectChanges();
        if (this.config) {
            if (!this.payPal) {
                this.initPayPalScript(this.config, (payPal) => {
                    // store reference to paypal global script
                    this.payPal = payPal;
                    this.doPayPalCheck();
                });
            }
            else {
                this.doPayPalCheck();
            }
        }
    }
    doPayPalCheck() {
        if (this.initializePayPal &&
            this.config &&
            this.payPal &&
            this.payPalButtonContainerElem) {
            // make sure that id is also set
            if (this.payPalButtonContainerElem.nativeElement.id) {
                this.initializePayPal = false;
                this.initPayPal(this.config, this.payPal);
            }
        }
    }
    initPayPalScript(config, initPayPal) {
        this.paypalScriptService.registerPayPalScript({
            clientId: config.clientId,
            commit: config.advanced && config.advanced.commit
                ? config.advanced.commit
                : undefined,
            currency: config.currency,
            vault: config.vault,
            intent: config.intent,
            extraParams: config.advanced && config.advanced.extraQueryParams
                ? config.advanced.extraQueryParams
                : [],
        }, (paypal) => {
            this.scriptLoaded.next(paypal);
            initPayPal(paypal);
        });
    }
    generateElementId() {
        return `ngx-captcha-id-${this.generateGuid()}`;
    }
    initPayPal(config, paypal) {
        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls
        this.ngZone.runOutsideAngular(() => {
            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page
            const createOrder = (data, actions) => {
                return this.ngZone.run(() => {
                    if (config.createOrderOnClient && config.createOrderOnServer) {
                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.
                    Please choose one or the other.`);
                    }
                    if (!config.createOrderOnClient && !config.createOrderOnServer) {
                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.
                    Please define one of these to create order.`);
                    }
                    if (config.createOrderOnClient) {
                        return actions.order.create(config.createOrderOnClient(data));
                    }
                    if (config.createOrderOnServer) {
                        return config.createOrderOnServer(data);
                    }
                    throw Error(`Invalid state for 'createOrder'.`);
                });
            };
            const createSubscription = (data, actions) => {
                return this.ngZone.run(() => {
                    if (config.createSubscriptionOnClient) {
                        return actions.subscription.create(config.createSubscriptionOnClient(data));
                    }
                });
            };
            const onShippingChange = (data, actions) => {
                return this.ngZone.run(() => {
                    if (config.onShippingChange) {
                        return config.onShippingChange(data, actions);
                    }
                });
            };
            const buttonsConfig = {
                style: config.style,
                onApprove: (data, actions) => {
                    return this.ngZone.run(() => {
                        if (config.onApprove) {
                            config.onApprove(data, actions);
                        }
                        // capture on server
                        if (config.authorizeOnServer) {
                            return config.authorizeOnServer(data, actions);
                        }
                        // capture on client
                        const onClientAuthorization = config.onClientAuthorization;
                        if (onClientAuthorization) {
                            actions.order
                                .capture()
                                .then((details) => {
                                this.ngZone.run(() => {
                                    onClientAuthorization(details);
                                });
                            });
                            return;
                        }
                    });
                },
                onError: (error) => {
                    this.ngZone.run(() => {
                        if (config.onError) {
                            config.onError(error);
                        }
                    });
                },
                onCancel: (data, actions) => {
                    this.ngZone.run(() => {
                        if (config.onCancel) {
                            config.onCancel(data, actions);
                        }
                    });
                },
                onClick: (data, actions) => {
                    this.ngZone.run(() => {
                        if (config.onClick) {
                            config.onClick(data, actions);
                        }
                    });
                },
                onInit: (data, actions) => {
                    this.ngZone.run(() => {
                        if (config.onInit) {
                            config.onInit(data, actions);
                        }
                    });
                },
                // Add the functions if they've been created in the config object
                // The API only allows one of the two to be set
                ...((config.createOrderOnClient || config.createOrderOnServer) && {
                    createOrder,
                }),
                ...(config.createSubscriptionOnClient && { createSubscription }),
                // The onShippingChange callback cannot be used with subscriptions
                // so we only add it if it is set
                ...(config.onShippingChange && { onShippingChange }),
            };
            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);
        });
    }
    generateGuid() {
        let d = new Date().getTime(), d2 = (performance && performance.now && performance.now() * 1000) || 0;
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
            let r = Math.random() * 16;
            if (d > 0) {
                r = (d + r) % 16 | 0;
                d = Math.floor(d / 16);
            }
            else {
                r = (d2 + r) % 16 | 0;
                d2 = Math.floor(d2 / 16);
            }
            return (c == "x" ? r : (r & 0x7) | 0x8).toString(16);
        });
    }
}
/** @nocollapse */ NgxPaypalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: NgxPaypalComponent, deps: [{ token: i1.PayPalScriptService }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ NgxPaypalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.3", type: NgxPaypalComponent, selector: "ngx-paypal", inputs: { config: "config", registerScript: "registerScript" }, outputs: { scriptLoaded: "scriptLoaded" }, viewQueries: [{ propertyName: "payPalButtonContainer", first: true, predicate: ["payPalButtonContainer"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div #payPalButtonContainer [id]="payPalButtonContainerId"></div>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.3", ngImport: i0, type: NgxPaypalComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: "ngx-paypal",
                    template: `
    <div #payPalButtonContainer [id]="payPalButtonContainerId"></div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.PayPalScriptService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { config: [{
                type: Input
            }], registerScript: [{
                type: Input
            }], scriptLoaded: [{
                type: Output
            }], payPalButtonContainer: [{
                type: ViewChild,
                args: ["payPalButtonContainer", { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,